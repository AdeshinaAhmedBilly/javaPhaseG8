BLACKBOXAI

Let's tackle the problems one by one, creating methods in Java for each task. We'll build the methods step by step to ensure clarity and readability.

Problem 1: Validate String Digits
We need to check if the string satisfies the rule for every index.

java

Verify

Open In Editor
Run
Copy code
public class PhaseGate {

    public static boolean validateString(String num) {
        int[] count = new int[10]; // Array to count occurrences of digits 0-9

        // Count occurrences of each digit
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }

        // Validate the counts against the string
        for (int i = 0; i < num.length(); i++) {
            if (count[i] != num.charAt(i) - '0') {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(validateString("1210")); // Output: true
    }
}
Problem 2: Sum of Unique Elements
We need to find the sum of unique elements in an array.

java

Verify

Open In Editor
Run
Copy code
public static int sumOfUnique(int[] nums) {
    Map<Integer, Integer> frequencyMap = new HashMap<>();

    // Count frequency of each number
    for (int num : nums) {
        frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
    }

    // Sum unique elements
    int sum = 0;
    for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
        if (entry.getValue() == 1) {
            sum += entry.getKey();
        }
    }
    return sum;
}

public static void main(String[] args) {
    System.out.println(sumOfUnique(new int[]{1, 2, 3, 2})); // Output: 4
}
Problem 3: Remove Duplicates from Array
We will create a method to eliminate duplicates while preserving order.

java

Verify

Open In Editor
Run
Copy code
public static int[] removeDuplicates(int[] nums) {
    Set<Integer> seen = new LinkedHashSet<>(); // Preserve order

    for (int num : nums) {
        seen.add(num);
    }

    // Convert Set back to array
    return seen.stream().mapToInt(Integer::intValue).toArray();
}

public static void main(String[] args) {
    int[] uniqueArray = removeDuplicates(new int[]{1, 2, 2, 3, 4, 4, 5, 6, 6, 7});
    System.out.println(Arrays.toString(uniqueArray)); // Output: [1, 2, 3, 4, 5, 6, 7]
}
Problem 4: Count Character Occurrences
We will create a method to count occurrences of a specified character in a string.

java

Verify

Open In Editor
Run
Copy code
public static int countCharacterOccurrences(String word, char letter) {
    int count = 0;

    for (char c : word.toCharArray()) {
        if (c == letter) {
            count++;
        }
    }
    return count;
}

public static void main(String[] args) {
    System.out.println(countCharacterOccurrences("Hello World", 'o')); // Output: 2
}
Problem 5: Check for Prime Number
We will create a method to check if a number is prime.

java

Verify

Open In Editor
Run
Copy code
public static boolean isPrime(int num) {
    if (num <= 1) return false; // 0 and 1 are not prime
    for (int i = 2; i <= Math.sqrt(num); i++) {
        if (num % i == 0) return false; // Found a divisor
    }
    return true;
}

public static void main(String[] args) {
    System.out.println(isPrime(7)); // Output: true
}
Problem 6: Merge and Sort Two Lists
We will create a method to merge two lists and sort them in descending order.

java

Verify

Open In Editor
Run
Copy code
public static List<Integer> mergeAndSortDescending(List<Integer> list1, List<Integer> list2) {
    List<Integer> mergedList = new ArrayList<>(list1);
    mergedList.addAll(list2);
    Collections.sort(mergedList, Collections.reverseOrder());
    return mergedList;
}

public static void main(String[] args) {
    System.out.println(mergeAndSortDescending(Arrays.asList(3, 1, 5), Arrays.asList(9, 3, 2))); // Output: [9, 5, 3, 3, 2, 1]
}
Problem 7: Find Factors of a Number
We will create a method to find the factors of a given number.

java

Verify

Open In Editor
Run
Copy code
public static List<Integer> findFactors(int num) {
    List<Integer> factors = new ArrayList<>();
    for
You

JAVA PHASEGATE

Use Java to solve the following problems of functions and methods while crating the methods bit by bit so that the code can be readable and writeable

[1] You are given a string num of digits(0-9). Each character in the string represents how many times the digit corresponding to its index appears in the string.
Return True if the string satisfies the rule for every index, otherwise Return False.

Example 1 input: "1210" output: true

Explanation At index 0, the digit 0 appears 1 time At index 1, the digit 1 appears 2 times At index 2, the digit 2 appears 0 times

[3] You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.
Example 1 input: nums = [1,2,3,2] output = 4 Explanation: The unique elements are [1,3], and the sum is 4

Example 2 input: nums = [1,1,1,1,1] output: 0

[4] Write a method that eliminates duplicate values from an integer array. The method should take an array of integers as input and return a new array containing only the unique values from the original array, preserving their first occurrence order.
Example 1:

Input: Enter 10 integers: [1,2,2,3,4,4,5,6,6,7] Output: The unique integers are: [1,2,3,4,5,6,7]

Example 2:

Input: Enter 10 integers: [9,8,7,7,6,5,5,5,4,3] Output: The unique integers are: [9,8,7,6,5,4,3]

[6]. Write a method that counts the number of occurrences of a specified character in a given string
Example 1 Input: Word: = "Hello World" letter = "o" output: 2

Example 2: Input: Word = "OpenAI" letter = "a" output: 1

Example 3: Input: Word = "Java" letter = "k" Output: 0

[10]. Write a method which takes in a integer and return true if it is a prime number
Example 1: input: 7 Output: False

Example 2: Input: 3 Output: True

[8]. Write a method that takes two unsorted lists and returns a new sorted list in descending order
Example 1: Input1: [3,1,5] Input 2: [9,3,2] Output: [8,6,5,4,3,1]

Example 2 Input: [7,4,1] Input 2: [9,3,2] Output:[9,7,4,3,2,1]

[11]. Write a method which takes in an integer and return the factors of the number
Example 1: Input: 7 Output: [1,7]

Example 2: Input: 24 Output: [1,2,3,4,5,6,8,12,24]

[7]. Write a method that finds the smallest index of the largest element in an array. If the array has multiple ocurrencs of the largest element, the method should return the index of the first occurences.
Example 1: Input: {1,5,3,4,5,5} Output: 1

Example 2: Input: {1,2,8,20,5} Output: 3

[12]. Given two strings and return true if t is an anagram of s, and false otherwise
Example 1: Input: s = "anagram", t = "nagaram" Output: true

Example 2: Input: s = "rat", t = "cat" Output: False

[14]. Given an array of ntegers nums and an integer target, return indices of the two numbers such that they add up to target
Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0'1]

Example 2: Input: nums = [3,2,4] Output: [1,2]

BLACKBOXAI

Let's tackle each problem step by step in Java, ensuring that the code is readable and maintainable. We'll create methods for each problem and provide examples in the main method.

Problem 1: Validate String Digits
We need to check if the string satisfies the rule for every index.

java

Verify

Open In Editor
Run
Copy code
public class PhaseGate {

    public static boolean validateString(String num) {
        int[] count = new int[10]; // Array to count occurrences of digits 0-9

        // Count occurrences of each digit
        for (char c : num.toCharArray()) {
            count[c - '0']++;
        }

        // Validate the counts against the string
        for (int i = 0; i < num.length(); i++) {
            if (count[i] != num.charAt(i) - '0') {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(validateString("1210")); // Output: true
    }
}
Problem 2: Sum of Unique Elements
We need to find the sum of unique elements in an array.

java

Verify

Open In Editor
Run
Copy code
import java.util.HashMap;

public static int sumOfUnique(int[] nums) {
    HashMap<Integer, Integer> frequencyMap = new HashMap<>();

    // Count frequency of each number
    for (int num : nums) {
        frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
    }

    // Sum unique elements
    int sum = 0;
    for (int key : frequencyMap.keySet()) {
        if (frequencyMap.get(key) == 1) {
            sum += key;
        }
    }
    return sum;
}

public static void main(String[] args) {
    System.out.println(sumOfUnique(new int[]{1, 2, 3, 2})); // Output: 4
    System.out.println(sumOfUnique(new int[]{1, 1, 1, 1, 1})); // Output: 0
}
Problem 3: Remove Duplicates from Array
We will create a method to eliminate duplicates while preserving order.

java

Verify

Open In Editor
Run
Copy code
import java.util.LinkedHashSet;

public static int[] removeDuplicates(int[] nums) {
    LinkedHashSet<Integer> uniqueSet = new LinkedHashSet<>();

    for (int num : nums) {
        uniqueSet.add(num);
    }

    // Convert Set back to array
    return uniqueSet.stream().mapToInt(Integer::intValue).toArray();
}

public static void main(String[] args) {
    int[] uniqueArray = removeDuplicates(new int[]{1, 2, 2, 3, 4, 4, 5, 6, 6, 7});
    System.out.println(Arrays.toString(uniqueArray)); // Output: [1, 2, 3, 4, 5, 6, 7]
}
Problem 4: Count Character Occurrences
We will create a method to count occurrences of a specified character in a string.

java

Verify

Open In Editor
Run
Copy code
public static int countCharacterOccurrences(String word, char letter) {
    int count = 0;

    for (char c : word.toCharArray()) {
        if (c == letter) {
            count++;
        }
    }
    return count;
}

public static void main(String[] args) {
    System.out.println(countCharacterOccurrences("Hello World", 'o')); // Output: 2
    System.out.println(countCharacterOccurrences("OpenAI", 'a')); // Output: 1
    System.out.println(countCharacterOccurrences("Java", 'k')); // Output: 0
}
Problem 5: Check for Prime Number
We will create a method to check if a number is prime.

java

Verify

Open In Editor
Run
Copy code
public static boolean isPrime(int num) {
    if (num <= 1) return false; // 0 and 1 are not prime
    for (int i = 2; i <= Math.sqrt(num); i++) {
        if (num % i == 0) return false; // Found a divisor
    }
    return true;
}

public static void main(String[] args) {
    System.out.println(isPrime(7)); // Output: true
    System.out.println(isPrime(3)); // Output: true
    System.out.println(isPrime(4)); // Output: false
}
Problem 6: Merge and Sort Two Lists
We will create a method to merge two lists and sort them in descending order.

java

Verify

Open In Editor
Run
Copy code
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public static List<Integer> mergeAndSortDescending(List<Integer> list1, List<Integer> list2) {
    List<Integer> mergedList = new ArrayList<>(list1);
    mergedList.addAll(list2);
    Collections.sort(merged



Share
New
Edit
Continue
Group Chat
