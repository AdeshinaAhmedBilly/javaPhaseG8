


1. [1] You are given a string num of digits(0-9). Each character in the string represents how many times the digit corresponding to its index appears in the string.



Return True if the string satisfies the rule for every index, otherwise Return False.



Example 1

input: "1210"

output: true



Explanation 

At index 0, the digit 0 appears 1 time

At index 1, the digit 1 appears 2 times

At index 2, the digit 2 appears 0 times





2. [3] You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.



Example 1

input: nums = [1,2,3,2]

output = 4

Explanation: The unique elements are [1,3], and the sum is 4



Example 2

input: nums = [1,1,1,1,1]

output: 0







3. [4] Write a method that eliminates duplicate values from an integer array. The method should take an array of integers as input and return a new array containing only the unique values from the original array, preserving their first occurrence order.



Example 1:



Input:

Enter 10 integers: [1,2,2,3,4,4,5,6,6,7]

Output:

The unique integers are: [1,2,3,4,5,6,7]



Example 2: 



Input: 

Enter 10 integers: [9,8,7,7,6,5,5,5,4,3]

Output:

The unique integers are: [9,8,7,6,5,4,3]





4. [6]. Write a method that counts the number of occurrences of a specified character in a given string



Example 1

Input: Word: = "Hello World" letter = "o"

output: 2



Example 2:

Input: Word = "OpenAI" letter = "a"

output: 1



Example 3:

Input: Word = "Java" letter = "k"

Output: 0





5. [10]. Write a method which takes in a integer and return true if it is a prime number



Example 1:

input: 7

Output: False



Example 2:

Input: 3

Output: True





6. [8]. Write a method that takes two unsorted lists and returns a new sorted list in descending order



Example 1:

Input1: [3,1,5] Input 2: [9,3,2]

Output: [8,6,5,4,3,1]



Example 2

Input: [7,4,1] Input 2: [9,3,2]

Output:[9,7,4,3,2,1]





7. [11]. Write a method which takes in an integer and return the factors of the number



Example 1:

Input: 7

Output: [1,7]



Example 2:

Input: 24

Output: [1,2,3,4,5,6,8,12,24]





8. [7]. Write a method that finds the smallest index of the largest element in an array. If the array has multiple ocurrencs of the largest element, the method should return the index of the first occurences.



Example 1:

Input: {1,5,3,4,5,5}

Output: 1



Example 2:

Input: {1,2,8,20,5}

Output: 3



9. [12]. Given two strings and return true if t is an anagram of s, and false otherwise



Example 1:

Input: s = "anagram", t = "nagaram"

Output: true



Example 2:

Input: s = "rat", t = "cat"

Output: False



10. [14]. Given an array of ntegers nums and an integer target, return indices of the two numbers such that they add up to target



Example 1:

Input: nums = [2,7,11,15], target = 9

Output: [0'1]



Example 2:

Input: nums = [3,2,4]

Output: [1,2]



Certainly, let's break down the Java solutions for the given problems step-by-step:

1. String Validation

Java

public class StringValidation {

    public static boolean isValidString(String num) {
        if (num == null || num.isEmpty()) {
            return true; // Empty string is considered valid
        }

        for (int i = 0; i < num.length(); i++) {
            int count = Character.getNumericValue(num.charAt(i)); 
            if (count != countOccurrences(num, i)) {
                return false;
            }
        }
        return true;
    }

    private static int countOccurrences(String str, int index) {
        char target = Character.forDigit(index, 10); 
        int count = 0;
        for (char c : str.toCharArray()) {
            if (c == target) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        String num1 = "1210";
        String num2 = "3021";

        System.out.println(num1 + " is valid: " + isValidString(num1)); // Output: true
        System.out.println(num2 + " is valid: " + isValidString(num2)); // Output: false
    }
}
2. Sum of Unique Elements

Java

import java.util.HashSet;
import java.util.Set;

public class SumOfUniqueElements {

    public static int sumOfUnique(int[] nums) {
        int sum = 0;
        Set<Integer> seenOnce = new HashSet<>();
        Set<Integer> seenTwice = new HashSet<>();

        for (int num : nums) {
            if (seenOnce.contains(num)) {
                seenOnce.remove(num);
                seenTwice.add(num);
            } else if (!seenTwice.contains(num)) {
                seenOnce.add(num);
            }
        }

        for (int num : seenOnce) {
            sum += num;
        }

        return sum;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 2};
        int[] nums2 = {1, 1, 1, 1, 1};

        System.out.println("Sum of unique elements in " + Arrays.toString(nums1) + " is: " + sumOfUnique(nums1)); // Output: 4
        System.out.println("Sum of unique elements in " + Arrays.toString(nums2) + " is: " + sumOfUnique(nums2)); // Output: 0
    }
}
3. Remove Duplicates

Java

import java.util.ArrayList;
import java.util.List;

public class RemoveDuplicates {

    public static int[] removeDuplicates(int[] nums) {
        List<Integer> uniqueList = new ArrayList<>();

        for (int num : nums) {
            if (!uniqueList.contains(num)) {
                uniqueList.add(num);
            }
        }

        int[] uniqueArray = new int[uniqueList.size()];
        for (int i = 0; i < uniqueList.size(); i++) {
            uniqueArray[i] = uniqueList.get(i);
        }

        return uniqueArray;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 3, 4, 4, 5, 6, 6, 7};
        int[] nums2 = {9, 8, 7, 7, 6, 5, 5, 5, 4, 3};

        System.out.println("Unique integers: " + Arrays.toString(removeDuplicates(nums1)));
        System.out.println("Unique integers: " + Arrays.toString(removeDuplicates(nums2)));
    }
}
4. Count Character Occurrences

Java

public class CountCharacterOccurrences {

    public static int countOccurrences(String word, char letter) {
        int count = 0;
        for (char c : word.toCharArray()) {
            if (c == letter) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        String word1 = "Hello World";
        String word2 = "OpenAI";
        String word3 = "Java";

        System.out.println("Occurrences of 'o' in " + word1 + ": " + countOccurrences(word1, 'o')); // Output: 2
        System.out.println("Occurrences of 'a' in " + word2 + ": " + countOccurrences(word2, 'a')); // Output: 1
        System.out.println("Occurrences of 'k' in " + word3 + ": " + countOccurrences(word3, 'k')); // Output: 0
    }
}
5. Check for Prime Number

Java

public class PrimeNumberChecker {

    public static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int num1 = 7;
        int num2 = 3;

        System.out.println(num1 + " is prime: " + isPrime(num1)); // Output: true
        System.out.println(num2 + " is prime: " + isPrime(num2)); // Output: true
    }
}
6. Merge and Sort Two Lists

Java

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class MergeAndSortLists {

    public static List<Integer> mergeAndSort(List<Integer> list1, List<Integer> list2) {
        List<Integer> mergedList = new ArrayList<>(list1);
        mergedList.addAll(list2);
        Collections.sort(mergedList, Collections.reverseOrder());
        return mergedList;
    }

    public static void main(String[] args) {
        List<Integer> list1 = List.of(3, 1, 5);
        List<Integer> list2 = List.of(9, 3, 2);

        System.out.println("Merged and sorted list: " + mergeAndSort(list1, list2)); // Output: [9, 7, 5, 4, 3, 3, 2, 1]
    }
}
7. Find Factors of a Number

Java

import java.util.ArrayList;
import java.util.List;

public class FindFactors {

    public static List<Integer> findFactors(int num) {
        List<Integer> factors = new ArrayList<>();
        factors.add(1);

        for (int i = 2; i <= num / 2; i++) {
            if (num % i == 0) {
                factors.add(i);
            }
        }

        factors.add(num);
        return factors;
    }

    public static void main(String[] args) {
        int num1 = 7;
        int num2 = 24;

        System.out.println("Factors of " + num1 + ": " + findFactors(num1)); // Output: [1, 7]
        System.out.println("Factors of " + num2 + ": " + findFactors(num2)); // Output: [1, 2, 3, 4, 6, 8, 12, 24]
    }
}
8. Find Index of Largest Element

Java

public class FindIndexOfLargestElement {

    public static int findIndexOfLargestElement(int[] arr) {
        if (arr == null || arr.length == 0) {
            return -1; // Handle empty array
        }

        int maxIndex = 0;
        int max = arr[0];

        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
                maxIndex = i;
            }
        }

        return maxIndex;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 5, 3, 4, 5, 5};
        int[] arr2 = {1, 2








