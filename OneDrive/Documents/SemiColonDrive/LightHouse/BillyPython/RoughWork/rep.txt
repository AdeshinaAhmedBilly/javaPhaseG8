
Below are the Java solutions to the given problems:
Problem 1
Java
public class Main {
    public static boolean digitCount(String num) {
        for (int i = 0; i < num.length(); i++) {
            int count = 0;
            for (int j = 0; j < num.length(); j++) {
                if (num.charAt(j) - '0' == i) {
                    count++;
                }
            }
            if (count != num.charAt(i) - '0') {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        System.out.println(digitCount("1210")); // true
    }
}
Problem 3
Java
import java.util.*;

public class Main {
    public static int[] sumOfUnique(int[] nums) {
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : nums) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        int sum = 0;
        for (int num : countMap.keySet()) {
            if (countMap.get(num) == 1) {
                sum += num;
            }
        }
        return new int[]{sum};
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 2};
        System.out.println(Arrays.toString(sumOfUnique(nums))); // [4]
    }
}
Problem 4
Java
import java.util.*;

public class Main {
    public static int[] eliminateDuplicates(int[] nums) {
        Set<Integer> set = new LinkedHashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int i = 0;
        int[] result = new int[set.size()];
        for (int num : set) {
            result[i++] = num;
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 2, 3, 4, 4, 5, 6, 6, 7};
        System.out.println(Arrays.toString(eliminateDuplicates(nums))); 
        // [1, 2, 3, 4, 5, 6, 7]
    }
}
Problem 6
Java
import java.util.*;

public class Main {
    public static int[] mergeAndSort(int[] nums1, int[] nums2) {
        int[] result = new int[nums1.length + nums2.length];
        System.arraycopy(nums1, 0, result, 0, nums1.length);
        System.arraycopy(nums2, 0, result, nums1.length, nums2.length);
        Arrays.sort(result);
        reverseArray(result);
        return result;
    }

    public static void reverseArray(int[] array) {
        int left = 0;
        int right = array.length - 1;
        while (left < right) {
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;
            left++;
            right--;
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {3, 1, 5};
        int[] nums2 = {9, 3, 2};
        System.out.println(Arrays.toString(mergeAndSort(nums1, nums2))); 
        // [9, 5, 3, 3, 2, 1]
    }
}
Problem 7
Java
public class Main {
    public static int[] factors(int n) {
        List<Integer> factors = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                factors.add(i);
            }
        }
        int[] result = new int[factors.size()];
        for (int i = 0; i < factors.size(); i++) {
            result[i] = factors.get(i);
        }
        return result;
    }

    public static void main(String[] args) {
        System.out.println(Arrays.toString(factors(24))); 
        // [1, 2, 3, 4, 6, 8, 12, 24]
    }
}
Problem 8
Java
public class Main {
    public static int smallestIndexOfLargest(int[] nums) {
        int max = Integer.MIN_VALUE;
        int index = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }
        return index;
    }

    public static void main(String[] args) {
        int[] nums = {